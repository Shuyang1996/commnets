import pleasetransfer
import socket
import hashlib 
t=pleasetransfer.pleasetransfer(True)
t.send_setup()
t.rec_setup()
t.settimeout(1)

#file_object = open("file_1.txt","r");
#output = open("output.txt","w");

#for line in file_object:
#	for letter in line:
#		output.write(bin(ord(letter)))

#output.close()
def filechunks(inputfile, chunksize=9):
	with open(inputfile, "rb") as f:
    		while True:
        		chunk = f.read(chunksize)
        		if chunk:
        			yield chunk
    			else:
    				break


def is_corrupted(instance):
    return (instance.checksum == TCP_segment.checksum_function(instance))
#def chunkbytes(chunk)
#	with chunk as f

#def checksum_func(chunk):
#	i = 0
#	total = []
#	print hash(chunk)
#	while i<=1494:
#		part1 = chunk[i:i+9]
#		print part1
#		part1 = int(part1,2)
#		part2 = chunk[i+9:i+18]
#		print part2
#		part2 = int(part2,2)
#		sums = bin(part1+part2)
#		total += sums
#		i = i+18
# chunk = chunk.replace('0', 'x')
#    chunk = chunk.replace('1', '0')
#    chunk = chunk.replace('x', '1')
#    chunk = chunk.replace('1b', '0b')

i=0
while True:
	try:
		for chunk in filechunks('output.txt'):
			#print chunk
			seq = bin(i)[2:].zfill(16)
			#print seq
			TCP = seq + chunk[3:len(chunk)]
			i = i+1
			# print '\n'
			checksum = (hashlib.md5(TCP).hexdigest())
			checksum = bin(int(checksum, 16))[2:].zfill(128)
			# print checksum
			# print '\n'
			# print TCP
			TCP_segment = TCP + checksum
			#print TCP_segment + '\n'
			t.sendbits(TCP_segment)
    		print 'seq:' + seq + '\n'
    		print 'checksum:' + checksum + '\n'
    		ack=t.recbits()
        	#print ack
        	break

    	except socket.timeout:
    		print 'Oh no a timeout! Retransmit!'
       		t.sendbits(TCP_segment)
